
import logging
from typing import Dict, Any
from .gate_system_utils import aplicar_gate_system
from .setup_detector_utils import identificar_setup
from .comprar_helper import processar_estrategia_compra

logger = logging.getLogger(__name__)

def executar_analise(dados_mercado: Dict, dados_risco: Dict, dados_alavancagem: Dict) -> Dict[str, Any]:
    """
    CAMADA 4: Executa An√°lise T√°tica
    
    Fluxo:
    1. Gate System (valida√ß√µes + alertas)
    2. Se bloqueado ‚Üí para
    3. Se liberado ‚Üí identifica setup
    4. Processa decis√£o final
    """
    try:
        logger.info("üéØ Executando Camada 4: Execu√ß√£o T√°tica")
        
        # 1. GATE SYSTEM (valida√ß√µes + alertas)
        logger.info("üö™ Aplicando Gate System...")
        gate_result = aplicar_gate_system(dados_mercado, dados_risco, dados_alavancagem)
        logger.info(f"üö™ Gate: {gate_result['status']} - {gate_result['motivo']}")
        
        # 2. SE GATE BLOQUEADO ‚Üí PARA AQUI
        if not gate_result['liberado']:
            logger.warning("üö´ Gate bloqueado - execu√ß√£o interrompida")
            return {
                "tecnicos": {},
                "estrategia": {
                    "decisao": "BLOQUEADO",
                    "setup": "NAO_IDENTIFICADO",
                    "urgencia": "alta",
                    "justificativa": gate_result['motivo']
                }
            }
        
        # 3. IDENTIFICAR SETUP
        logger.info("üîç Identificando setup...")
        setup_info = identificar_setup()
        logger.info(f"üéØ Setup: {setup_info['setup']} - Encontrado: {setup_info.get('encontrado', False)}")
        
        # 4. PROCESSAR DECIS√ÉO FINAL
        logger.info("‚ö° Processando decis√£o estrat√©gica...")
        estrategia = _processar_decisao_final(setup_info)
        logger.info(f"üéØ Decis√£o: {estrategia['decisao']} - Urg√™ncia: {estrategia['urgencia']}")
        
        return {
            "tecnicos": setup_info.get('dados_tecnicos', {}),
            "estrategia": estrategia
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro Camada 4 Execu√ß√£o T√°tica: {str(e)}")
        raise Exception(f"Execu√ß√£o T√°tica falhou: {str(e)}")

def _processar_decisao_final(setup_info: Dict) -> Dict:
    """Processa decis√£o final baseada em setup identificado"""
    try:
        # SETUP IDENTIFICADO: Processar estrat√©gia de compra
        if setup_info.get('encontrado', False):
            return processar_estrategia_compra(setup_info)
        
        # AGUARDAR: Nenhum setup identificado
        return {
            "decisao": "AGUARDAR",
            "setup": "NENHUM",
            "urgencia": "baixa",
            "justificativa": "Aguardando setup favor√°vel"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro decis√£o final: {str(e)}")
        raise Exception(f"Falha decis√£o estrat√©gica: {str(e)}")