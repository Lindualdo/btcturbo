# app/services/utils/helpers/ema144_live_helper.py

import logging
import pandas as pd
from tvDatafeed import TvDatafeed, Interval
from app.config import get_settings

logger = logging.getLogger(__name__)

def obter_ema144_distance_atualizada():
    """
    Busca EMA144 e pre√ßo atual via TradingView (dados atualizados)
    Baseado em ema_calculator.py
    """
    try:
        logger.info("üìä Buscando EMA144 atualizada via TradingView...")
        
        # 1. Conectar TradingView (baseado em ema_calculator.py)
        tv = _get_tv_session()
        
        # 2. Buscar dados semanal (EMA144 √© calculada em timeframe semanal)
        df = tv.get_hist(
            symbol="BTCUSDT",
            exchange="BINANCE",
            interval=Interval.in_weekly,
            n_bars=700  # Suficiente para EMA 610 (maior per√≠odo)
        )
        
        if df is None or df.empty:
            raise Exception("Dados TradingView indispon√≠veis")
        
        if len(df) < 144:
            raise Exception(f"Dados insuficientes: {len(df)} barras < 144 necess√°rias")
        
        # 3. Calcular EMA144
        ema_144_series = df['close'].ewm(span=144, adjust=False).mean()
        ema_144_valor = float(ema_144_series.iloc[-1])
        
        # 4. Pre√ßo atual (√∫ltima barra)
        preco_atual = float(df['close'].iloc[-1])
        
        # 5. Calcular dist√¢ncia percentual
        distance_percent = ((preco_atual - ema_144_valor) / ema_144_valor) * 100
        
        logger.info(f"‚úÖ EMA144 atualizada: ${ema_144_valor:,.2f}")
        logger.info(f"‚úÖ Pre√ßo atual: ${preco_atual:,.2f}")
        logger.info(f"‚úÖ Dist√¢ncia: {distance_percent:+.2f}%")
        
        return {
            "distance_percent": round(distance_percent, 2),
            "preco_atual": preco_atual,
            "ema_144": ema_144_valor,
            "timeframe": "1W",
            "fonte": "tradingview_live",
            "barras_utilizadas": len(df)
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro obtendo EMA144 atualizada: {str(e)}")
        raise Exception(f"EMA144 distance atualizada indispon√≠vel: {str(e)}")

def _get_tv_session():
    """
    Conecta TradingView (baseado em ema_calculator.py)
    """
    try:
        settings = get_settings()
        
        # Tentar com credenciais primeiro
        if hasattr(settings, 'TV_USERNAME') and settings.TV_USERNAME and settings.TV_PASSWORD:
            try:
                logger.info("üîó Conectando TradingView com credenciais...")
                tv = TvDatafeed(
                    username=settings.TV_USERNAME,
                    password=settings.TV_PASSWORD
                )
                logger.info("‚úÖ TradingView conectado com login")
                return tv
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Login TradingView falhou: {e}")
        
        # Fallback: modo an√¥nimo
        logger.info("üîó Conectando TradingView modo an√¥nimo...")
        tv = TvDatafeed()
        logger.info("‚úÖ TradingView conectado sem login")
        return tv
        
    except Exception as e:
        logger.error(f"‚ùå Erro conectando TradingView: {str(e)}")
        raise Exception(f"Conex√£o TradingView falhou: {str(e)}")

def validar_ema144_data(ema_144: float, preco: float, distance: float) -> bool:
    """
    Valida se os dados EMA144 fazem sentido
    """
    try:
        # Valida√ß√µes b√°sicas
        if ema_144 <= 0 or preco <= 0:
            logger.error(f"‚ùå Valores inv√°lidos: EMA144={ema_144}, Pre√ßo={preco}")
            return False
        
        # EMA144 deve estar em range razo√°vel do BTC
        if not (10000 <= ema_144 <= 200000):
            logger.error(f"‚ùå EMA144 fora do range: {ema_144}")
            return False
        
        # Pre√ßo deve estar em range razo√°vel do BTC
        if not (10000 <= preco <= 200000):
            logger.error(f"‚ùå Pre√ßo fora do range: {preco}")
            return False
        
        # Dist√¢ncia n√£o deve ser extrema (¬±100%)
        if abs(distance) > 100:
            logger.warning(f"‚ö†Ô∏è Dist√¢ncia extrema: {distance:.2f}%")
        
        logger.info("‚úÖ Dados EMA144 validados")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro na valida√ß√£o: {str(e)}")
        return False

def debug_ema144_calculation(df: pd.DataFrame):
    """
    DEBUG: Mostra detalhes do c√°lculo EMA144
    """
    try:
        logger.info("üîç DEBUG EMA144:")
        logger.info(f"üìä DataFrame shape: {df.shape}")
        logger.info(f"üìä √öltimos 5 closes: {df['close'].tail().tolist()}")
        
        # Calcular EMAs menores para compara√ß√£o
        ema_17 = df['close'].ewm(span=17, adjust=False).mean().iloc[-1]
        ema_34 = df['close'].ewm(span=34, adjust=False).mean().iloc[-1]
        ema_144 = df['close'].ewm(span=144, adjust=False).mean().iloc[-1]
        
        logger.info(f"üìä EMA17: {ema_17:.2f}")
        logger.info(f"üìä EMA34: {ema_34:.2f}")
        logger.info(f"üìä EMA144: {ema_144:.2f}")
        
        # Verificar ordem das EMAs (deve ser crescente em bull market)
        if ema_17 > ema_34 > ema_144:
            logger.info("‚úÖ EMAs em ordem bullish")
        else:
            logger.warning("‚ö†Ô∏è EMAs n√£o est√£o em ordem bullish")
            
    except Exception as e:
        logger.error(f"‚ùå Erro no debug: {str(e)}")

# Fun√ß√£o principal para uso no rsi_helper.py
def obter_ema144_distance():
    """
    Fun√ß√£o principal: retorna apenas a dist√¢ncia percentual
    """
    try:
        resultado = obter_ema144_distance_atualizada()
        return resultado["distance_percent"]
    except Exception as e:
        raise Exception(f"EMA144 distance indispon√≠vel: {str(e)}")